{"ast":null,"code":"var _jsxFileName = \"/Users/matthewmckeon/intermittentfastingapp/src/History.js\";\nimport React, { Component } from 'react';\nimport { Bar, Charts, defaults } from 'react-chartjs-2';\nimport './.css';\n\nclass History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Not sure if this is the correct way to set up\n      // the state for 'time' and 'date' since we are\n      // obtaining these values from a Firebase dataset\n      chartData: {\n        date: \"\",\n        time: \"\"\n      }\n    };\n  } // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n  // This method shows the inital dataset (ex: a user will have a dataset with no values)\n  // componentDidMount() {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     timeRef.on('value', snap => {\n  //         this.setState({\n  //             time: snap.val()\n  //         });\n  //     });\n  //     const dateRef = rootRef.child('date');\n  //     dateRef.on('value', snap => {\n  //         this.setState({\n  //             date: snap.val()\n  //         });\n  //     });\n  // }\n  // // React life cycle hooks with firebase updates\n  // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n  // componentDidUpdate(prevProp, prevState) {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     if(prevState.time != this.state.time){\n  //         timeRef.on('value', snap => {\n  //             this.setState({\n  //                 time: snap.val()\n  //             });\n  //         });\n  //     }\n  //     if(prevState.date != this.state.date){\n  //         const dateRef = rootRef.child('date');\n  //         dateRef.on('value', snap => {\n  //             this.setState({\n  //                 date: snap.val()\n  //             });\n  //         });\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.chartData,\n      width: 50,\n      height: 250,\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            stacked: true,\n            type: 'time',\n            time: {\n              unit: 'week',\n              displayFormats: {\n                week: 'll'\n              }\n            }\n          }],\n          yAxes: [{\n            stacked: true,\n            type: 'time',\n            time: {\n              displayFormats: {\n                minute: 'h:mm a'\n              }\n            }\n          }]\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default History;","map":{"version":3,"sources":["/Users/matthewmckeon/intermittentfastingapp/src/History.js"],"names":["React","Component","Bar","Charts","defaults","History","constructor","props","state","chartData","date","time","render","maintainAspectRatio","scales","xAxes","stacked","type","unit","displayFormats","week","yAxes","minute"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,EAAaC,MAAb,EAAqBC,QAArB,QAAoC,iBAApC;AACA,OAAO,QAAP;;AAGA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC5BK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACA;AACA;AACAC,MAAAA,SAAS,EAAC;AACNC,QAAAA,IAAI,EAAE,EADA;AAENC,QAAAA,IAAI,EAAE;AAFA;AAJD,KAAb;AASH,GAZ2B,CAc5B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,GAAD;AACI,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,SADrB;AAEI,MAAA,KAAK,EAAE,EAFX;AAGI,MAAA,MAAM,EAAE,GAHZ;AAII,MAAA,OAAO,EAAE;AACLI,QAAAA,mBAAmB,EAAE,KADhB;AAELC,QAAAA,MAAM,EAAC;AACHC,UAAAA,KAAK,EAAC,CAAC;AACHC,YAAAA,OAAO,EAAE,IADN;AAEHC,YAAAA,IAAI,EAAE,MAFH;AAGHN,YAAAA,IAAI,EAAC;AACDO,cAAAA,IAAI,EAAE,MADL;AAEDC,cAAAA,cAAc,EAAC;AACXC,gBAAAA,IAAI,EAAE;AADK;AAFd;AAHF,WAAD,CADH;AAWHC,UAAAA,KAAK,EAAE,CAAC;AACJL,YAAAA,OAAO,EAAE,IADL;AAEJC,YAAAA,IAAI,EAAE,MAFF;AAGJN,YAAAA,IAAI,EAAC;AACDQ,cAAAA,cAAc,EAAE;AACZG,gBAAAA,MAAM,EAAE;AADI;AADf;AAHD,WAAD;AAXJ;AAFF,OAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ;AAiCH;;AA/F2B;;AAoGhC,eAAejB,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Bar, Charts, defaults} from 'react-chartjs-2';\nimport './.css';\n\n\nclass History extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // Not sure if this is the correct way to set up\n            // the state for 'time' and 'date' since we are\n            // obtaining these values from a Firebase dataset\n            chartData:{\n                date: \"\",\n                time: \"\"\n            }\n        }\n    }\n\n    // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n    // This method shows the inital dataset (ex: a user will have a dataset with no values)\n    // componentDidMount() {\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n    //     const timeRef = rootRef.child('time');\n        \n    //     // Note: the '.on' method allows us to synchronize data in real-time\n    //     timeRef.on('value', snap => {\n    //         this.setState({\n    //             time: snap.val()\n    //         });\n    //     });\n\n    //     const dateRef = rootRef.child('date');\n    //     dateRef.on('value', snap => {\n    //         this.setState({\n    //             date: snap.val()\n    //         });\n    //     });\n    // }\n\n    // // React life cycle hooks with firebase updates\n    // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n    // componentDidUpdate(prevProp, prevState) {\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n    //     const timeRef = rootRef.child('time');\n        \n    //     // Note: the '.on' method allows us to synchronize data in real-time\n    //     if(prevState.time != this.state.time){\n    //         timeRef.on('value', snap => {\n    //             this.setState({\n    //                 time: snap.val()\n    //             });\n    //         });\n    //     }\n\n    //     if(prevState.date != this.state.date){\n    //         const dateRef = rootRef.child('date');\n    //         dateRef.on('value', snap => {\n    //             this.setState({\n    //                 date: snap.val()\n    //             });\n    //         });\n    //     }\n\n    // }\n\n    render(){\n        return (\n            <div className='Chart'>\n            <Bar \n                data={this.state.chartData}\n                width={50}\n                height={250}\n                options={{\n                    maintainAspectRatio: false,\n                    scales:{\n                        xAxes:[{\n                            stacked: true,\n                            type: 'time',\n                            time:{\n                                unit: 'week',\n                                displayFormats:{\n                                    week: 'll'\n                                }\n                            }\n                        }],\n                        yAxes: [{\n                            stacked: true,\n                            type: 'time',\n                            time:{\n                                displayFormats: {\n                                    minute: 'h:mm a'\n                                }\n                            }\n                        }]\n                    },\n                }}\n                />\n            </div>\n        )\n    }\n}\n\n\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}