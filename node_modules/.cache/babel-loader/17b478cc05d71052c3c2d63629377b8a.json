{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amu\\\\Desktop\\\\intermittentfastingapp\\\\src\\\\history.js\";\nimport React, { Component } from 'react';\nimport { Chart } from \"react-google-charts\";\nimport './ClockAndTimer.css';\n\nclass History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Not sure if this is the correct way to set up\n      // the state for 'time' and 'date' since we are\n      // obtaining these values from a Firebase dataset\n      chartData: {\n        date: \"\",\n        time: \"\"\n      }\n    };\n  } // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n  // This method shows the inital dataset (ex: a user will have a dataset with no values)\n  // componentDidMount() {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     timeRef.on('value', snap => {\n  //         this.setState({\n  //             time: snap.val()\n  //         });\n  //     });\n  //     const dateRef = rootRef.child('date');\n  //     dateRef.on('value', snap => {\n  //         this.setState({\n  //             date: snap.val()\n  //         });\n  //     });\n  // }\n  // // React life cycle hooks with firebase updates\n  // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n  // componentDidUpdate(prevProp, prevState) {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     if(prevState.time != this.state.time){\n  //         timeRef.on('value', snap => {\n  //             this.setState({\n  //                 time: snap.val()\n  //             });\n  //         });\n  //     }\n  //     if(prevState.date != this.state.date){\n  //         const dateRef = rootRef.child('date');\n  //         dateRef.on('value', snap => {\n  //             this.setState({\n  //                 date: snap.val()\n  //             });\n  //         });\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, \"History Chart\"), /*#__PURE__*/React.createElement(Chart, {\n      width: '500px',\n      height: '300px',\n      chartType: \"BarChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }\n      }, \"Loading Chart\"),\n      data: [['Day', 'Fasting Time', 'NonFasting Time'], ['May 18, 2020', 10, 14], ['May 19, 2020', 8, 16], ['May 20, 2020', 14, 10], ['May 21, 2020', 3, 21], ['May 22, 2020', 9, 15], ['May 23, 2020', 10, 14], ['May 24, 2020', 7, 17]],\n      options: {\n        title: 'Tracking Fast (hours per day)',\n        chartArea: {\n          width: '50%'\n        },\n        isStacked: true,\n        hAxis: {\n          title: 'Total hours per fast and non fast',\n          maxValue: 24 // minValue: 0,\n\n        },\n        vAxis: {\n          title: 'Dates'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default History;","map":{"version":3,"sources":["C:/Users/Amu/Desktop/intermittentfastingapp/src/history.js"],"names":["React","Component","Chart","History","constructor","props","state","chartData","date","time","render","title","chartArea","width","isStacked","hAxis","maxValue","vAxis"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAO,qBAAP;;AAGA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC5BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACA;AACA;AACAC,MAAAA,SAAS,EAAC;AACNC,QAAAA,IAAI,EAAE,EADA;AAENC,QAAAA,IAAI,EAAE;AAFA;AAJD,KAAb;AASH,GAZ2B,CAc5B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,eAGA,oBAAC,KAAD;AACI,MAAA,KAAK,EAAE,OADX;AAEI,MAAA,MAAM,EAAE,OAFZ;AAGI,MAAA,SAAS,EAAC,UAHd;AAII,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJZ;AAKI,MAAA,IAAI,EAAE,CACF,CAAC,KAAD,EAAQ,cAAR,EAAwB,iBAAxB,CADE,EAEF,CAAC,cAAD,EAAiB,EAAjB,EAAqB,EAArB,CAFE,EAGF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CAHE,EAIF,CAAC,cAAD,EAAiB,EAAjB,EAAqB,EAArB,CAJE,EAKF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CALE,EAMF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CANE,EAOF,CAAC,cAAD,EAAiB,EAAjB,EAAqB,EAArB,CAPE,EAQF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CARE,CALV;AAeI,MAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,+BADF;AAELC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFN;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,KAAK,EAAE;AACPJ,UAAAA,KAAK,EAAE,mCADA;AAEPK,UAAAA,QAAQ,EAAE,EAFH,CAGP;;AAHO,SAJF;AASLC,QAAAA,KAAK,EAAE;AACPN,UAAAA,KAAK,EAAE;AADA;AATF,OAfb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,CADJ;AAmEH;;AAjI2B;;AAsIhC,eAAeR,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Chart } from \"react-google-charts\";\r\nimport './ClockAndTimer.css';\r\n\r\n\r\nclass History extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            // Not sure if this is the correct way to set up\r\n            // the state for 'time' and 'date' since we are\r\n            // obtaining these values from a Firebase dataset\r\n            chartData:{\r\n                date: \"\",\r\n                time: \"\"\r\n            }\r\n        }\r\n    }\r\n\r\n    // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\r\n    // This method shows the inital dataset (ex: a user will have a dataset with no values)\r\n    // componentDidMount() {\r\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\r\n    //     const timeRef = rootRef.child('time');\r\n        \r\n    //     // Note: the '.on' method allows us to synchronize data in real-time\r\n    //     timeRef.on('value', snap => {\r\n    //         this.setState({\r\n    //             time: snap.val()\r\n    //         });\r\n    //     });\r\n\r\n    //     const dateRef = rootRef.child('date');\r\n    //     dateRef.on('value', snap => {\r\n    //         this.setState({\r\n    //             date: snap.val()\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    // // React life cycle hooks with firebase updates\r\n    // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\r\n    // componentDidUpdate(prevProp, prevState) {\r\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\r\n    //     const timeRef = rootRef.child('time');\r\n        \r\n    //     // Note: the '.on' method allows us to synchronize data in real-time\r\n    //     if(prevState.time != this.state.time){\r\n    //         timeRef.on('value', snap => {\r\n    //             this.setState({\r\n    //                 time: snap.val()\r\n    //             });\r\n    //         });\r\n    //     }\r\n\r\n    //     if(prevState.date != this.state.date){\r\n    //         const dateRef = rootRef.child('date');\r\n    //         dateRef.on('value', snap => {\r\n    //             this.setState({\r\n    //                 date: snap.val()\r\n    //             });\r\n    //         });\r\n    //     }\r\n\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n            <div className='Chart'>\r\n            <h1>History Chart</h1>\r\n\r\n            <Chart\r\n                width={'500px'}\r\n                height={'300px'}\r\n                chartType=\"BarChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={[\r\n                    ['Day', 'Fasting Time', 'NonFasting Time'],\r\n                    ['May 18, 2020', 10, 14],\r\n                    ['May 19, 2020', 8, 16],\r\n                    ['May 20, 2020', 14, 10],\r\n                    ['May 21, 2020', 3, 21],\r\n                    ['May 22, 2020', 9, 15],\r\n                    ['May 23, 2020', 10, 14],\r\n                    ['May 24, 2020', 7, 17],\r\n                ]}\r\n                options={{\r\n                    title: 'Tracking Fast (hours per day)',\r\n                    chartArea: { width: '50%' },\r\n                    isStacked: true,\r\n                    hAxis: {\r\n                    title: 'Total hours per fast and non fast',\r\n                    maxValue: 24,\r\n                    // minValue: 0,\r\n                    },\r\n                    vAxis: {\r\n                    title: 'Dates',\r\n                    },\r\n                }}\r\n            />\r\n\r\n            {/* <Bar \r\n            <div className='Chart'>\r\n            <Bar \r\n                data={this.state.chartData}\r\n                width={50}\r\n                height={250}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    scales:{\r\n                        xAxes:[{\r\n                            stacked: true,\r\n                            type: 'time',\r\n                            time:{\r\n                                unit: 'week',\r\n                                displayFormats:{\r\n                                    week: 'll'\r\n                                }\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            stacked: true,\r\n                            type: 'time',\r\n                            time:{\r\n                                displayFormats: {\r\n                                    minute: 'h:mm a'\r\n                                }\r\n                            }\r\n                        }]\r\n                    },\r\n                }}\r\n                /> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default History;\r\n"]},"metadata":{},"sourceType":"module"}