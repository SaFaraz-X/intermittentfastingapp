{"ast":null,"code":"var _jsxFileName = \"/Users/sauhilfaraz/Desktop/intermittentfastingapp/src/History.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Bar, Charts, defaults } from 'react-chartjs-2';\nimport { Chart } from \"react-google-charts\";\n\nclass History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Not sure if this is the correct way to set up\n      // the state for 'time' and 'date' since we are\n      // obtaining these values from a Firebase dataset\n      chartData: {\n        date: \"\",\n        time: \"\"\n      }\n    };\n  } // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n  // This method shows the inital dataset (ex: a user will have a dataset with no values)\n  // componentDidMount() {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     timeRef.on('value', snap => {\n  //         this.setState({\n  //             time: snap.val()\n  //         });\n  //     });\n  //     const dateRef = rootRef.child('date');\n  //     dateRef.on('value', snap => {\n  //         this.setState({\n  //             date: snap.val()\n  //         });\n  //     });\n  // }\n  // // React life cycle hooks with firebase updates\n  // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n  // componentDidUpdate(prevProp, prevState) {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     if(prevState.time != this.state.time){\n  //         timeRef.on('value', snap => {\n  //             this.setState({\n  //                 time: snap.val()\n  //             });\n  //         });\n  //     }\n  //     if(prevState.date != this.state.date){\n  //         const dateRef = rootRef.child('date');\n  //         dateRef.on('value', snap => {\n  //             this.setState({\n  //                 date: snap.val()\n  //             });\n  //         });\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      classname: \"Chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"History Chart\"), /*#__PURE__*/React.createElement(Chart, {\n      width: '500px',\n      height: '300px',\n      chartType: \"BarChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, \"Loading Chart\"),\n      data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n      options: {\n        title: 'Population of Largest U.S. Cities',\n        chartArea: {\n          width: '50%'\n        },\n        isStacked: true,\n        hAxis: {\n          title: 'Total Population',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'City'\n        }\n      } // For tests\n      ,\n      rootProps: {\n        'data-testid': '3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.chartData,\n      width: 50,\n      height: 250,\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            stacked: true,\n            type: 'time',\n            time: {\n              unit: 'week',\n              displayFormats: {\n                week: 'll'\n              }\n            }\n          }],\n          yAxes: [{\n            stacked: true,\n            type: 'time',\n            time: {\n              displayFormats: {\n                minute: 'h:mm a'\n              }\n            }\n          }]\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default History;","map":{"version":3,"sources":["/Users/sauhilfaraz/Desktop/intermittentfastingapp/src/History.js"],"names":["React","Component","Bar","Charts","defaults","Chart","History","constructor","props","state","chartData","date","time","render","title","chartArea","width","isStacked","hAxis","minValue","vAxis","maintainAspectRatio","scales","xAxes","stacked","type","unit","displayFormats","week","yAxes","minute"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Bar, Charts, defaults} from 'react-chartjs-2';\nimport { Chart } from \"react-google-charts\";\n\n\nclass History extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // Not sure if this is the correct way to set up\n            // the state for 'time' and 'date' since we are\n            // obtaining these values from a Firebase dataset\n            chartData:{\n                date: \"\",\n                time: \"\"\n            }\n        }\n    }\n\n    // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n    // This method shows the inital dataset (ex: a user will have a dataset with no values)\n    // componentDidMount() {\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n    //     const timeRef = rootRef.child('time');\n        \n    //     // Note: the '.on' method allows us to synchronize data in real-time\n    //     timeRef.on('value', snap => {\n    //         this.setState({\n    //             time: snap.val()\n    //         });\n    //     });\n\n    //     const dateRef = rootRef.child('date');\n    //     dateRef.on('value', snap => {\n    //         this.setState({\n    //             date: snap.val()\n    //         });\n    //     });\n    // }\n\n    // // React life cycle hooks with firebase updates\n    // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n    // componentDidUpdate(prevProp, prevState) {\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n    //     const timeRef = rootRef.child('time');\n        \n    //     // Note: the '.on' method allows us to synchronize data in real-time\n    //     if(prevState.time != this.state.time){\n    //         timeRef.on('value', snap => {\n    //             this.setState({\n    //                 time: snap.val()\n    //             });\n    //         });\n    //     }\n\n    //     if(prevState.date != this.state.date){\n    //         const dateRef = rootRef.child('date');\n    //         dateRef.on('value', snap => {\n    //             this.setState({\n    //                 date: snap.val()\n    //             });\n    //         });\n    //     }\n\n    // }\n\n    render(){\n        return (\n            <div classname='Chart'>\n            <h1>History Chart</h1>\n\n            <Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"BarChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    ['City', '2010 Population', '2000 Population'],\n    ['New York City, NY', 8175000, 8008000],\n    ['Los Angeles, CA', 3792000, 3694000],\n    ['Chicago, IL', 2695000, 2896000],\n    ['Houston, TX', 2099000, 1953000],\n    ['Philadelphia, PA', 1526000, 1517000],\n  ]}\n  options={{\n    title: 'Population of Largest U.S. Cities',\n    chartArea: { width: '50%' },\n    isStacked: true,\n    hAxis: {\n      title: 'Total Population',\n      minValue: 0,\n    },\n    vAxis: {\n      title: 'City',\n    },\n  }}\n  // For tests\n  rootProps={{ 'data-testid': '3' }}\n/>\n\n            <Bar \n                data={this.state.chartData}\n                width={50}\n                height={250}\n                options={{\n                    maintainAspectRatio: false,\n                    scales:{\n                        xAxes:[{\n                            stacked: true,\n                            type: 'time',\n                            time:{\n                                unit: 'week',\n                                displayFormats:{\n                                    week: 'll'\n                                }\n                            }\n                        }],\n                        yAxes: [{\n                            stacked: true,\n                            type: 'time',\n                            time:{\n                                displayFormats: {\n                                    minute: 'h:mm a'\n                                }\n                            }\n                        }]\n                    },\n                }}\n                />\n            </div>\n        )\n    }\n}\n\n\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}