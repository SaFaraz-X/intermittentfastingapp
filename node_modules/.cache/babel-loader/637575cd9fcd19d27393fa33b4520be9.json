{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Developer/react/intermittentfastingapp/src/history.js\";\nimport React, { Component } from 'react';\nimport { Chart } from \"react-google-charts\";\nimport './ClockAndTimer.css';\n\nclass History extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Not sure if this is the correct way to set up\n      // the state for 'time' and 'date' since we are\n      // obtaining these values from a Firebase dataset\n      chartData: {\n        date: \"\",\n        time: \"\"\n      },\n      data: [['Day', 'Fasting Time', 'NonFasting Time'], ['May 18, 2020', 10, 14], ['May 19, 2020', 8, 16], ['May 20, 2020', 14, 10], ['May 21, 2020', 3, 21], ['May 22, 2020', this.props.fastTime, this.props.eatTime], ['May 23, 2020', 10, 14], ['May 24, 2020', 7, 17]]\n    };\n  } // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n  // This method shows the inital dataset (ex: a user will have a dataset with no values)\n  // componentDidMount() {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     timeRef.on('value', snap => {\n  //         this.setState({\n  //             time: snap.val()\n  //         });\n  //     });\n  //     const dateRef = rootRef.child('date');\n  //     dateRef.on('value', snap => {\n  //         this.setState({\n  //             date: snap.val()\n  //         });\n  //     });\n  // }\n  // // React life cycle hooks with firebase updates\n  // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n  // componentDidUpdate(prevProp, prevState) {\n  //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n  //     const timeRef = rootRef.child('time');\n  //     // Note: the '.on' method allows us to synchronize data in real-time\n  //     if(prevState.time != this.state.time){\n  //         timeRef.on('value', snap => {\n  //             this.setState({\n  //                 time: snap.val()\n  //             });\n  //         });\n  //     }\n  //     if(prevState.date != this.state.date){\n  //         const dateRef = rootRef.child('date');\n  //         dateRef.on('value', snap => {\n  //             this.setState({\n  //                 date: snap.val()\n  //             });\n  //         });\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \"History Chart\"), /*#__PURE__*/React.createElement(Chart, {\n      width: '500px',\n      height: '300px',\n      chartType: \"BarChart\",\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, \"Loading Chart\"),\n      data: this.state.data,\n      options: {\n        title: 'Tracking Fast (hours per day)',\n        chartArea: {\n          width: '50%'\n        },\n        isStacked: true,\n        hAxis: {\n          title: 'Total hours per fast and non fast',\n          maxValue: 24 // minValue: 0,\n\n        },\n        vAxis: {\n          title: 'Dates'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Update Chart\"));\n  }\n\n}\n\nexport default History;","map":{"version":3,"sources":["/Users/matt/Developer/react/intermittentfastingapp/src/history.js"],"names":["React","Component","Chart","History","constructor","props","state","chartData","date","time","data","fastTime","eatTime","render","title","chartArea","width","isStacked","hAxis","maxValue","vAxis"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAO,qBAAP;;AAGA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC5BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACA;AACA;AACAC,MAAAA,SAAS,EAAC;AACNC,QAAAA,IAAI,EAAE,EADA;AAENC,QAAAA,IAAI,EAAE;AAFA,OAJD;AAQTC,MAAAA,IAAI,EAAE,CACF,CAAC,KAAD,EAAQ,cAAR,EAAwB,iBAAxB,CADE,EAEF,CAAC,cAAD,EAAiB,EAAjB,EAAqB,EAArB,CAFE,EAGF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CAHE,EAIF,CAAC,cAAD,EAAiB,EAAjB,EAAqB,EAArB,CAJE,EAKF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CALE,EAMF,CAAC,cAAD,EAAiB,KAAKL,KAAL,CAAWM,QAA5B,EAAsC,KAAKN,KAAL,CAAWO,OAAjD,CANE,EAOF,CAAC,cAAD,EAAiB,EAAjB,EAAqB,EAArB,CAPE,EAQF,CAAC,cAAD,EAAiB,CAAjB,EAAoB,EAApB,CARE;AARG,KAAb;AAmBH,GAtB2B,CAwB5B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAC,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,eAGA,oBAAC,KAAD;AACI,MAAA,KAAK,EAAE,OADX;AAEI,MAAA,MAAM,EAAE,OAFZ;AAGI,MAAA,SAAS,EAAC,UAHd;AAII,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJZ;AAKI,MAAA,IAAI,EAAE,KAAKP,KAAL,CAAWI,IALrB;AAMI,MAAA,OAAO,EAAE;AACLI,QAAAA,KAAK,EAAE,+BADF;AAELC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFN;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,KAAK,EAAE;AACPJ,UAAAA,KAAK,EAAE,mCADA;AAEPK,UAAAA,QAAQ,EAAE,EAFH,CAGP;;AAHO,SAJF;AASLC,QAAAA,KAAK,EAAE;AACPN,UAAAA,KAAK,EAAE;AADA;AATF,OANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,eAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAvBA,CADJ;AA2DH;;AAnI2B;;AAwIhC,eAAeX,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Chart } from \"react-google-charts\";\nimport './ClockAndTimer.css';\n\n\nclass History extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            // Not sure if this is the correct way to set up\n            // the state for 'time' and 'date' since we are\n            // obtaining these values from a Firebase dataset\n            chartData:{\n                date: \"\",\n                time: \"\"\n            },\n            data: [\n                ['Day', 'Fasting Time', 'NonFasting Time'],\n                ['May 18, 2020', 10, 14],\n                ['May 19, 2020', 8, 16],\n                ['May 20, 2020', 14, 10],\n                ['May 21, 2020', 3, 21],\n                ['May 22, 2020', this.props.fastTime, this.props.eatTime],\n                ['May 23, 2020', 10, 14],\n                ['May 24, 2020', 7, 17],\n            ]\n        }\n    }\n\n    // Source: https://www.youtube.com/watch?v=p4XTMvagQ2Q\n    // This method shows the inital dataset (ex: a user will have a dataset with no values)\n    // componentDidMount() {\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n    //     const timeRef = rootRef.child('time');\n        \n    //     // Note: the '.on' method allows us to synchronize data in real-time\n    //     timeRef.on('value', snap => {\n    //         this.setState({\n    //             time: snap.val()\n    //         });\n    //     });\n\n    //     const dateRef = rootRef.child('date');\n    //     dateRef.on('value', snap => {\n    //         this.setState({\n    //             date: snap.val()\n    //         });\n    //     });\n    // }\n\n    // // React life cycle hooks with firebase updates\n    // // This method shows the dataset after it's updated (ex: a user will have values in their dataset after using the timer)\n    // componentDidUpdate(prevProp, prevState) {\n    //     const rootRef = firebase.database().ref().child('react'); // Whatever is inside '.child()' argument is the root of the database\n    //     const timeRef = rootRef.child('time');\n        \n    //     // Note: the '.on' method allows us to synchronize data in real-time\n    //     if(prevState.time != this.state.time){\n    //         timeRef.on('value', snap => {\n    //             this.setState({\n    //                 time: snap.val()\n    //             });\n    //         });\n    //     }\n\n    //     if(prevState.date != this.state.date){\n    //         const dateRef = rootRef.child('date');\n    //         dateRef.on('value', snap => {\n    //             this.setState({\n    //                 date: snap.val()\n    //             });\n    //         });\n    //     }\n\n    // }\n\n    render(){\n        return (\n            <div className='Chart'>\n            <h1>History Chart</h1>\n\n            <Chart\n                width={'500px'}\n                height={'300px'}\n                chartType=\"BarChart\"\n                loader={<div>Loading Chart</div>}\n                data={this.state.data}\n                options={{\n                    title: 'Tracking Fast (hours per day)',\n                    chartArea: { width: '50%' },\n                    isStacked: true,\n                    hAxis: {\n                    title: 'Total hours per fast and non fast',\n                    maxValue: 24,\n                    // minValue: 0,\n                    },\n                    vAxis: {\n                    title: 'Dates',\n                    },\n                }}\n            />\n            <button>Update Chart</button>\n\n            {/* <Bar \n            <div className='Chart'>\n            <Bar \n                data={this.state.chartData}\n                width={50}\n                height={250}\n                options={{\n                    maintainAspectRatio: false,\n                    scales:{\n                        xAxes:[{\n                            stacked: true,\n                            type: 'time',\n                            time:{\n                                unit: 'week',\n                                displayFormats:{\n                                    week: 'll'\n                                }\n                            }\n                        }],\n                        yAxes: [{\n                            stacked: true,\n                            type: 'time',\n                            time:{\n                                displayFormats: {\n                                    minute: 'h:mm a'\n                                }\n                            }\n                        }]\n                    },\n                }}\n                /> */}\n            </div>\n        )\n    }\n}\n\n\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}